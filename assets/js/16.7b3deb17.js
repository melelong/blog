(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{532:function(t,s,e){"use strict";e.r(s);var a=e(2),_=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"vue的实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue的实现原理"}},[t._v("#")]),t._v(" vue的实现原理")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"}),e("ol",[e("li",[t._v("vue是一个典型的MVVM框架，模型Model是js对象，修改它则视图VIEW自动更新。")])])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"}),e("ol",{attrs:{start:"2"}},[e("li",[t._v("vue实现双向数据绑定，需要三大模块：")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Observer:能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者")])]),t._v(" "),e("li",[e("p",[t._v("Compile:对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定想要的更新函数")])]),t._v(" "),e("li",[e("p",[t._v("Watcher:作为链接Observer和Compile的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图。")])])])]),e("h2",{attrs:{id:"_1-对mvvm原理的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-对mvvm原理的理解"}},[t._v("#")]),t._v(" 1. 对MVVM原理的理解")]),t._v(" "),e("p",[t._v("传统的MVC:指用户操作会请求服务端路由，路由会调用对应的控制器来处理，控制器会获取数据，将结果返回给前端，页面重新渲染。")]),t._v(" "),e("p",[t._v("MVVM:传统的前端会将数据手动渲染到页面上，MVVM模式不需要用户收到操作dom元素，将数据绑定到viewmodel层上，会自动将数据渲染到页面中，视图变化会通知viewmodel层更新数据，viewmodel就是我们mvvm模式中的桥梁。")]),t._v(" "),e("h2",{attrs:{id:"_2-响应式数据的原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-响应式数据的原理"}},[t._v("#")]),t._v(" 2. 响应式数据的原理")]),t._v(" "),e("ol",[e("li",[t._v("核心点：")])]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("object"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("defineProperty\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("默认vue在初始化数据时，会给data中的属性使用object.defineProperty重新定义所有属性，当页面取到对应属性时，会进行依赖收集（收集当前组件的watcher）,如果属性发生变化会通知相关依赖进行更新操作。\n"),e("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200604115704256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3MzI2MTI1,size_16,color_FFFFFF,t_70",alt:"img"}})])]),t._v(" "),e("p",[t._v("拦截属性的获取，进行依赖收集")]),t._v(" "),e("p",[t._v("拦截属性的更新操作，对相关依赖进行通知")]),t._v(" "),e("h2",{attrs:{id:"_3-vue中是如何检测数组变化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-vue中是如何检测数组变化"}},[t._v("#")]),t._v(" 3. Vue中是如何检测数组变化？")]),t._v(" "),e("p",[t._v("数组方法（push,pop,shift,unshift,splice,sort,reverse）")]),t._v(" "),e("p",[t._v("理解：使用函数劫持的方式，重写了数组的方法；")]),t._v(" "),e("p",[t._v("Vue将data中的数组，进行了原型链重写，指向了自己定义的数组原型方法，这样当调用数组api时，可以通知依赖更新。如果数组中包含着引用类型，会对数组中的引用类型再次进行监控(用observeArray)。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200608104039339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3MzI2MTI1,size_16,color_FFFFFF,t_70",alt:"img1"}})]),t._v(" "),e("h2",{attrs:{id:"_4-为何vue采用异步渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-为何vue采用异步渲染"}},[t._v("#")]),t._v(" 4. 为何Vue采用异步渲染？")]),t._v(" "),e("p",[t._v("理解：vue是组件级更新")]),t._v(" "),e("p",[t._v("因为如果不采用异步更新，那么每次更新数据都会对当前组件进行重新渲染，所以为了性能考虑，vue会在本轮数据更新后，再去异步更新视图。\n"),e("img",{attrs:{src:"https://img-blog.csdnimg.cn/2020060810513270.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3MzI2MTI1,size_16,color_FFFFFF,t_70",alt:"img2"}})]),t._v(" "),e("h2",{attrs:{id:"_5-nexttick实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-nexttick实现原理"}},[t._v("#")]),t._v(" 5. nextTick实现原理？")]),t._v(" "),e("p",[t._v("理解：nextTick方法主要是使用了宏任务和微任务，定义了一个异步方法，多次调用nextTick会将方法存入队列中，通过这个异步方法清空当前队列，所以这个nextTick方法就是异步方法。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200608110743668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3MzI2MTI1,size_16,color_FFFFFF,t_70",alt:"img3"}})]),t._v(" "),e("h2",{attrs:{id:"_6-vue中computed的特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-vue中computed的特点"}},[t._v("#")]),t._v(" 6.Vue中computed的特点")]),t._v(" "),e("p",[t._v("理解：默认computed也是一个watcher，是具备缓存的，只要当依赖的属性发生变化时才会更新视图。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200608111238640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3MzI2MTI1,size_16,color_FFFFFF,t_70",alt:"img4"}})]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"},[t._v("computed、watch、method区别：")]),e("p",[t._v("1.computed可以让我们很好的监听多个数据或者一个数据来维护返回一个状态值，只要其中一个或多个数据发生变化，则会重新计算整个函数体，computed相当于属性的一个实时计算，如果实时计算里关联了对象，那么当对象的某个值改变的时候，同时会出发实时计算")]),t._v(" "),e("p",[t._v("2.Vue通过watch选项提供一个更通用的方法，来响应数据的变化。当你想要在数据变化响应时，执行异步操作或开销较大的操作")]),t._v(" "),e("p",[t._v("watch模式没有computed模式简单，但watch比较适合做异步的操作。")])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"}),e("p",[t._v("总结：computed是在HTML DOM加载后马上执行的，如赋值；")]),t._v(" "),e("p",[t._v("methods则必须要有一定的触发条件才能执行，如点击事件；")]),t._v(" "),e("p",[t._v("watch用于观察Vue实例上的数据变动。对应一个对象，键是观察表达式，值是对应回调。")])])])}),[],!1,null,null,null);s.default=_.exports}}]);